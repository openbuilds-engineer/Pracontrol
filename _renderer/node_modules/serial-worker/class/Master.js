'use strict'

var cp = require('child_process')
var EventEmitter = require('events')

class SerialMaster extends EventEmitter {
	constructor() {
		super()
		
		this.worker = cp.fork(__dirname + '/Worker.js', { silent: false })
		this.worker.on('message', arg => this.receive(arg))
		
		process.on('exit', e => worker.kill())
	}
	
	receive(e) { this.emit(e.type, e.arg) }
	
	send(e) { this.worker.send(e) }
	
	sendAndCallback(arg, callback) {
		this.send(arg)
		callback && this.once(arg.func + 'Callback', e => callback.apply(this, e))
	}
}

var master = new SerialMaster()

module.exports = class SerialInterface extends EventEmitter {
	constructor(path, options, immediate, callback) {
		super()
		
		master.sendAndCallback({ func: 'SerialPort', arg: [path, options, immediate] }, callback)
		
		master.on('disconnect', e => this.emit('disconnect', e))
		master.on('close', e => { this.emit('close', e); master.removeAllListeners() })
		master.on('data', e => this.emit('data', e))
	}
	
	static list(callback) { master.sendAndCallback({ func: 'list' }, callback) }
	
	open(callback) { master.sendAndCallback({ func: 'open' }, callback) }

	write(buffer, callback) { master.sendAndCallback({ func: 'write', arg: [buffer] }, callback) }
	
	isOpen(callback) { master.sendAndCallback({ func: 'isOpen' }, callback) }
	
	close(callback) { master.sendAndCallback({ func: 'close' }, callback) }
}
