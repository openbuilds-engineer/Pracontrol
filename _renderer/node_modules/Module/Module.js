var fs = require('fs-extra-promise')
var path = require('path')

var style = `
:host {
  
}
::content textarea { height: 15rem; }
::content li { margin-bottom: 1rem; }
`

module.exports = class Module extends WebComponentAbstract {
  init() {
    this.renderCss(style)
    
    if(!this.ser.conf) this.ser.conf = ''
    
    this.userModulesDir = path.join(require('electron').remote.app.getPath('userData'), 'node_modules')
    
    var div = this.new('div', { className: 'column-system' })
    var left = div.new('div')
    var right = div.new('div')
    
    var p = left.new('p')
    p.newText('Each line of module list represents a module name.')
    p.new('br')
    p.newText('Be careful load only trusted modules.')
    
    this.textarea = left.new('p').new('textarea', { value: this.ser.conf, placeholder: 'Module names' })
    this.textarea.on('input', e => this.ser.conf = this.textarea.value)
    left.new('p').innerHTML = `<a onclick="location.reload()" class="button">Reload to take effect</a>`
    
    this.loadUserModulesDir().then(e => this.exampleModule().then(e => {
      var exampleFile = moduleAvailable('Example')
      right.new('h1').textContent = 'Modules development'
      right.new('div').innerHTML = `
<ol>
  <li><a onclick="require('electron').shell.showItemInFolder(${JSON.stringify(exampleFile).replace(/"/g, '&quot;')})" title="${exampleFile}" class="button">Take Example.js</a></li>
  <li>Put some code in it</li>
  <li><a onclick="self.emit('newModule', 'Example')" class="button">Add it to the module list</a></li>
  <li><a onclick="location.reload()" class="button">Reload app</a></li>
  <li><a onclick="require('electron').remote.getCurrentWindow().toggleDevTools()" class="button">Toogle developer tools for debug</a></li>
  <li><a href="${App.package.repository.url}" class="button">Make a pull request</a></li>
  <li>Spread the word!</li>
</ol>
      `
    }))
    
    var p = this.new('p', { textContent: 'Open your require path: ' + this.userModulesDir })
    p.on('click', e => require('electron').shell.showItemInFolder(this.userModulesDir))
    p.style.cursor = 'pointer'
    
    defineEvent('newModule', 'Adds new module to module list', 'Modules', "''")
    self.on('newModule', e => {
      this.textarea.value = e.detail + '\n'
      this.textarea.dispatchEvent(new Event('input'))
    })
    
    setImmediate(() => self.emit('newTab', { elem: this, name: 'Modules', priority: 850 }))
  }
  
  loadUserModulesDir() {
    module.paths.unshift(this.userModulesDir)
    return fs.ensureDirAsync(this.userModulesDir + '/Example')
  }
  
  exampleModule() {
    return new Promise(resolve => {
      fs.stat(this.userModulesDir + '/Example/package.json', e => {
        if(!e) return resolve()
        
        Promise.all([
          fs.copyAsync(__dirname + '/Example/package.json', this.userModulesDir + "/Example/package.json"),
          fs.copyAsync(__dirname + '/Example/Example.js', this.userModulesDir + "/Example/Example.js"),
        ]).then(resolve)
      })
    })
  }
  
  loadModules() {
    this.ser.conf.split('\n').forEach(s =>
      s && moduleAvailable(s) && setImmediate(() => App.new(require(s), false) ))
  }
}

var moduleAvailable = m => { try { return require.resolve(m) } catch(e) { return false } }
