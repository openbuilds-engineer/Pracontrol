var SerialPort = null // lazy load

module.exports = class Serial extends WebComponentAbstract {
  init() {
    this.serial = null
    
    this.new(require('./Buffer'))
    
    defineEvent('refreshPorts', 'Reload port list', 'Serial')
    defineEvent('refreshPortsDone', 'Port are reloaded, listen only', 'Serial')
    defineEvent('newPort', 'New port found, listen only', 'Serial', '{ }')
    self.on('refreshPorts', e => this.refreshPorts())
    
    defineEvent('connect', 'Attempt to connect', 'Serial', `{ portName: '', baudrate: 0 }`)
    defineEvent('connected', 'Port connected, listen only', 'Serial')
    self.on('connect', e => this.connect(e.detail))
    
    defineEvent('disconnect', 'Attempt to disconnect', 'Serial')
    defineEvent('disconnected', 'Port disconnected, listen only', 'Serial')
    self.on('disconnect', e => this.serial && this.serial.close())
    self.on('disconnected', e => this.serial = null)
    
    defineEvent('serialData', 'New data from port', 'Serial', `{ data: '' }`)
    defineEvent('serialDirectWrite', 'Write data to port and skip buffer', 'Serial', `{ data: '' }`)
    self.on('serialDirectWrite', e => this.send(e.detail.data))
    
    // disconnect on close
    self.on('beforeunload', e => self.emit('disconnect'))
    
    setImmediate(() => {
      self.emit('disconnected')
      self.emit('refreshPorts')
    })
  }
  
  refreshPorts() {
    SerialPort = SerialPort || require('SerialPort')
    SerialPort.list((e, ports) => {
      if(e) throw e
      ports.reverse().forEach(port => self.emit('newPort', port))
      self.emit('refreshPortsDone')
    })
  }
  
  connect(e) {
    this.serial = new SerialPort(e.portName, {
      parser: SerialPort.parsers.readline('\n'),
      baudrate: parseInt(e.baudrate),
    })
    
    this.serial.on('open', () => self.emit('connected'))
    this.serial.on('close', () => self.emit('disconnected'))
    this.serial.on('error', e => { self.emit('disconnected'); throw e; })
    this.serial.on('data', data => self.emit('serialData', { data }))
  }
  
  send(data) {
    if(!this.serial) return
    this.serial.write(data)
    if(data == 'M410\n') self.emit('msg', 'Moves aborted. Motors can be out of sync.')
  }
}
