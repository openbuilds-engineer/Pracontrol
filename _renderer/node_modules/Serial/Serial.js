var SerialPort = null // lazy load

module.exports = class Serial extends WebComponentAbstract {
  init() {
    
    this.connectForm = this.new(require('./ConnectForm'))
    
    this.serial = null
    this.buffer = this.new(require('./SerialBuffer'), false, { parent: this })
    this.status = this.new(require('./SerialStatus'), false, { parent: this })
    
    defineEvent('refreshPorts', 'Reload port list', 'Serial')
    defineEvent('refreshPortsDone', 'Port are reloaded', 'Serial')
    defineEvent('newPort', 'New port found', 'Serial', '{ port: <port> }')
    self.on('refreshPorts', e => this.refreshPorts(e))
    
    defineEvent('connect', 'Attempt to connect', 'Serial')
    defineEvent('connected', 'Port connected', 'Serial')
    self.on('connect', e => this.connect(e))
    
    defineEvent('disconnect', 'Attempt to disconnect', 'Serial')
    defineEvent('disconnected', 'Port disconnected', 'Serial')
    self.on('disconnect', e => this.disconnect(e))
    self.on('disconnected', e => this.serial = null)
    
    defineEvent('serialData', 'New data from port', 'Serial', "{ data: '' }")
    defineEvent('serialDirectWrite', 'Write data to port and skip buffer', 'Serial', "{ data: '' }")
    self.on('serialDirectWrite', e => this.send(e.detail.data))
    
    // disconnect on close
    self.on('beforeunload', e => this.disconnect(e))
    
    setImmediate(() => {
      self.emit('refreshPorts')
      self.emit('disconnected')
      self.emit('newControl', { elem: this })
    })
  }
  
  refreshPorts(e) {
    SerialPort = SerialPort || require('serial-worker')
    SerialPort.list( (e, ports) => {
      if(e) throw new Error(e.message)
      ports.reverse().forEach(p => self.emit('newPort', { port: p }) )
      self.emit('refreshPortsDone')
    })
  }
  
  disconnect(e) {
    if(this.serial) this.serial.close()
  }
  
  connect(e) {
    if(!this.connectForm.port.selectedOptions[0]) {
      self.emit('disconnected')
      throw new Error('No ports selected')
    }
    
    if(!this.connectForm.speed.value) {
      self.emit('disconnected')
      throw new Error('No speed entered')
    }
    
    var port = this.connectForm.port.selectedOptions[0].port.comName
    
    this.serial = new SerialPort.SerialPort(port, {
      parser: SerialPort.parsers.readline('\n'),
      baudrate: this.connectForm.speed.value,
    }, false)
    
    this.serial.open(e => {
      if (e) { self.emit('disconnected'); throw new Error(e.message); }
      self.emit('connected')
    })
    this.serial.on('close', e => { self.emit('disconnected'); if(e) throw new Error(e.message); })
    this.serial.on('data', data => self.emit('serialData', { data }))
  }
  
  send(data) {
    if(!this.serial) return
    this.serial.write(data)
    if(data == 'M410\n') self.emit('msg', 'Moves aborted. Motors can be out of sync.')
  }
}
