module.exports = class SerialBuffer extends WebComponentAbstract {
  init() {
    
    this.buffer = []
    
    defineEvent('serialWrite', 'Send data to serial buffer', 'Serial buffer', "{ data: '' or [], prepend: false }")
    self.on('serialWrite', e => this.send(e.detail.data, e.detail.prepend))
    
    defineEvent('serialClean', 'Clean serial buffer', 'Serial buffer')
    self.on('serialClean', e => { this.buffer = []; self.emit('bufferChange') })
    
    
    defineEvent('deviceReady', 'Device is communicating', 'Serial buffer')
    defineEvent('deviceNotReady', 'Device is not communicating', 'Serial buffer')
    this.deviceReady = false
    self.on('deviceReady', e => this.deviceReady = true)
    self.on('deviceNotReady', e => this.deviceReady = false)
    self.on('disconnected', e => self.emit('deviceNotReady'))
    
    self.on('connected', e => self.emit('serialDirectWrite', { data: 'G4\n' }) )
    self.on('serialData', e => !this.deviceReady && self.emit('deviceReady'))
    
    
    defineEvent('deviceOk', 'Device ok', 'Serial buffer')
    defineEvent('deviceNotOk', 'Device busy', 'Serial buffer')
    this.deviceOk = false
    self.on('deviceOk', e => this.deviceOk = true)
    self.on('deviceNotOk', e => this.deviceOk = false)
    self.on('disconnected', e => self.emit('deviceNotOk'))
    
    self.on('deviceReady', e => self.emit('deviceOk'))
    self.on('serialData', e => this.checkOk(e))
    self.on('deviceOk', e => setImmediate(e => this.sendBuffer()))
    
    
    defineEvent('deviceReset', 'Device was reseted', 'Serial buffer')
    this.deviceStarted = false
    self.on('disconnected', e => this.deviceStarted = false)
    
    self.on('serialData', e => this.checkReset(e))
    self.on('deviceReset', e => self.emit('deviceReady'))
    self.on('deviceReset', e => self.emit('msg', 'device was reseted'))
    
    setImmediate(() => self.emit('bufferChange'))
  }
  
  checkReset(e) {
    if(e.detail.data != 'start\r') return
    if(this.deviceStarted) self.emit('deviceReset')
    this.deviceStarted = true
  }
  
  checkOk(e) {
    if(!this.deviceReady) return;
    if(e.detail.data.substr(0, 2) == 'ok') self.emit('deviceOk');
  }
  
  send(data, prepend) {
    if(!Array.isArray(data)) data = String(data).split('\n')
    
    if(prepend) data.reverse()
    
    data.forEach(i => {
      if(!i) return
      prepend ? this.buffer.unshift(i + '\n') : this.buffer.push(i + '\n')
    })
    
    self.emit('bufferChange')
    this.sendBuffer()
  }
  
  sendBuffer() {
    if(!this.deviceOk) return
    
    var data = this.buffer.shift()
    if(!data) return
    
    self.emit('bufferChange')
    self.emit('deviceNotOk')
    self.emit('serialDirectWrite', { data: data })
  }
}
