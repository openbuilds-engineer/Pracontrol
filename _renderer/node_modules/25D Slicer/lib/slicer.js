var fs = require('fs')
var path = require('path')

module.exports = class Slicer25D_Slicer extends WebComponentAbstract {
  init() {
    var div = this.new('div', { className: 'column-system' })
    this.left = div.new('div', { textContent: 'Drop image into app.' })
    this.right = div.new('div')
    
    this.left.style.minHeight = '2rem'
    this.left.style.marginBottom = this.left.style.marginBottom = 0
    this.right.style.flexBasis = 'auto'
    this.right.style.flexGrow = 0
    
    var opt = { type: "range", min: 0, max: 0, step: 1, value: 0 }
    this.slider = this.new('input', opt)
    this.slider.on('input', e => this.replay())
    
    this.canvas = this.new('canvas')
    this.ctx = this.canvas.getContext('2d')
  }
  
  slice(p) {
    if(!p) return
    
    this.startWorker()
      
    this.right.textContent = ''
    this.left.textContent = 'Reading... '
    this.getImagePath(p).then(p => {
      var img = this.new('img', { src: p }, false)
      img.on('load', e => this.renderImage(img))
    })
  }
  
  getImagePath(path) {
    return new Promise((resolve, reject) => {
      if(path.endsWith('.svg')) {
        var svg = fs.readFile(path, 'utf-8', (e, data) => {
          if(e) throw e
          // turn off antialias
          data = data.replace('</svg>', '<style>* { shape-rendering: crispEdges; text-rendering: optimizeSpeed; }</style></svg>')
          var blob = new Blob([data], { type: 'image/svg+xml;charset=utf-8' })
          resolve(window.URL.createObjectURL(blob))
        })
      } else {
        resolve(path)
      }
    })
  }
  
  startWorker() {
    if(this.w) this.w.terminate()
    
    this.w = new Worker(path.join(__dirname, 'worker.js'))
    this.w.postMessage({ func: 'importScripts', arg: [path.join(__dirname, 'spiral-flood-fill.js')] })
    this.w.onmessage = e => e.data.func && this[e.data.func].apply(this, e.data.arg)
    
    this.path = []
    this.gCode = []
    this.slider.max = 0
  }
  
  renderImage(domImg) {
    this.left.textContent = 'Rendering...'
    
    var w = domImg.width / 72 * 25.6 * this.parent.ser.fidelity
    var h = domImg.height / 72 * 25.6 * this.parent.ser.fidelity
    
    this.canvas.width = w
    this.canvas.height = h
    
    this.ctx.clearRect(0, 0, w, h)
    this.ctx.drawImage(domImg, 0, 0, w, h)
    var imgData = this.ctx.getImageData(0, 0, w, h)
    
    this.left.textContent = 'Slicing...'
    this.w.postMessage({ func: "slice", arg: [ imgData, this.parent.ser.channel ] })
  }
  
  newSlicePath(path) {
    this.path.push(path)
    this.slider.max = +this.slider.max + path.length
    this.right.textContent = `${this.path.length} paths ${this.slider.max} points`
  }
  
  sliceDone() {
    if(!this.path.length) {
      this.left.textContent = 'No paths, try diferrent slicing channel.'
      
      var a = this.left.new('a', { textContent: 'Reslice', className: 'button' })
      a.on('click', e => this.parent.slice())
      return
    }
    this.left.textContent = 'Generating gCode...'
    this.w.postMessage({ func: "gCode", arg: [ this.parent.powerCmd.value, this.parent.ser.fidelity, this.parent.ser.pass ] })
    
    this.slider.value = this.slider.max
    this.replay()
  }
  
  gCodeDone(gCode) {
    this.gCode = gCode
    
    this.left.textContent = 'Ready for '
    var a = this.left.new('a', { textContent: 'Print', className: 'button' })
    a.on('click', e => this.print())
    this.left.newText(' or ')
    
    var a = this.left.new('a', { textContent: 'Reslice', className: 'button' })
    a.on('click', e => this.parent.slice())
  }
  
  print(e) {
    self.emit('serialWrite', { data: this.gCode })
  }
  
  replay() {
    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)
    
    var val = +this.slider.value
    var count = 0
    loop:
    for(var i = 0; i < this.path.length; i++) {
      var path = this.path[i]
      for(var c = 0; c < path.length; c++) {
        if(count++ > val) break loop
        
        var p = path[c]
        this.ctx.fillStyle = `rgb(${255 - p.s}, ${255 - p.s}, ${255 - p.s})`
        this.ctx.fillRect(p.x, p.y, 1, 1)
      }  
    }
  }
}
