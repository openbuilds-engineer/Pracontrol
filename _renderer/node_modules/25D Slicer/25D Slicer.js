var style = `
:host {
  overflow-x: hidden;
  overflow-y: auto;
  display: block;
  height: 100%;
}

::content {
  textarea { height: 12rem; }
  input[type='range'], select { width: 100%; }
  canvas { width: 100%; border: 1px solid #ddd; box-sizing: border-box; image-rendering: pixelated; }
}
`

var filepath = require('path')

module.exports = class Slicer25D extends WebComponentAbstract {
  init() {
    this.renderLess(style)
    
    var div = this.new('div', { className: 'column-system' })
    this.left = div.new('div')
    this.slicer = div.new(require('./lib/slicer.js'), { parent: this })
    this.slicer.style.flexGrow = 3
    
    this.recent = this.left.new('p').new('select')
    this.recent.new('option', { textContent: 'Load recent files' })
    this.recent.on('input', e => this.slice())
    this.ser.recent = this.ser.recent || []
    this.ser.recent = this.ser.recent.slice(-5)
    this.ser.recent.forEach(p => this.newRecentOption(p))
    
    this.ser.fidelity = this.ser.fidelity || 5
    var l = this.left.new('p').new('label')
    var fid = l.newText('')
    Observe(this.ser, 'fidelity', v => fid.textContent = 'Fidelity ' + (Math.round((72 / 256) / v * 1000) / 100))
    l.new('br')
    Synth(this.ser, 'fidelity', l.new('input', { type: 'range', min: 1, max: 10, step: 0.05, value: this.ser.fidelity || 5 }))
    
    this.ser.pass = this.ser.pass || 1
    var l = this.left.new('p').new('label')
    var pass = l.newText('')
    Observe(this.ser, 'pass', v => pass.textContent = 'Passes ' + v)
    l.new('br')
    Synth(this.ser, 'pass', l.new('input', { type: 'range', min: 1, max: 100, step: 1, value: this.ser.pass || 1 }))
    
    this.ser.powerCmd = this.ser.powerCmd || 'G0 X${x} Y${y} \\\nZ${s * -1 / 1000}'
    var l = this.left.new('p').new('label', { textContent: 'Controling gCode' })
    Synth(this.ser, 'powerCmd', l.new('textarea'))
    l.new('pre').textContent = 'var x, y, s, p, first, last'
    
    this.ser.channel = isNaN(this.ser.channel) ? 4 : this.ser.channel
    this.channel = this.left.new('p').new('select')
    this.channel.new('option').textContent = 'Slice red'
    this.channel.new('option').textContent = 'Slice green'
    this.channel.new('option').textContent = 'Slice blue'
    this.channel.new('option').textContent = 'Slice alpha'
    this.channel.new('option').textContent = 'Slice grayscale'
    this.channel.on('input', e => this.ser.channel = this.channel.selectedIndex)
    this.channel.options[this.ser.channel].selected = true
    
    self.on('openFile', e => this.openFile(e))
    setImmediate(() => self.emit('newTab', { el: this, name: '2.5D' }))
  }
  
  openFile(e) {
    var p = e.detail[0].path
    
    if(!['svg', 'bmp', 'png', 'jpg', 'gif'].includes(p.substr(-3))) return
    
    self.emit('focusTab', this)
    
    this.ser.recent.push(p)
    this.newRecentOption(p, true)
    this.slice()
  }
  
  newRecentOption(path, selected) {
    if(this.recent.children.some(el => el.path == path)) return
    
    var textContent = filepath.basename(filepath.dirname(path)) + '/' + filepath.basename(path)
    var opt = this.recent.new('option', { path, textContent, selected }, false)
    this.recent.children[0].after(opt)
  }
  
  slice() {
    if(!this.recent.selectedOptions.length) return
    this.slicer.slice(this.recent.selectedOptions[0].path)
  }
}
