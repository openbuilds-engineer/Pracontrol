module.exports = class ControlShortcuts extends WebComponentAbstract {
  init() {
    self.on('deviceReady', e => this.deviceReady = true)
    self.on('deviceBusy', e => this.deviceReady = false)
    
    self.on('keydown', e => this.moveShortcut(e))
    defineShortcut('⌘Left', 'X–10 or with ⌥ –1', 'Move control')
    defineShortcut('⌘Right', 'X+10 or with ⌥ +1', 'Move control')
    defineShortcut('⌘Down', 'Y–10 or with ⌥ –1', 'Move control')
    defineShortcut('⌘Up', 'Y+10 or with ⌥ +1', 'Move control')
    defineShortcut('⌘–', 'Z–1 or with ⌥ –0.1', 'Move control')
    defineShortcut('⌘=', 'Z+1 or with ⌥ +0.1', 'Move control')
    
    self.on('keydown', e => this.keyShortcut(e))
    defineShortcut('⌘E', 'Home XY', 'gCode')
    defineShortcut('⌘⌥E', 'Home all', 'gCode')
    defineShortcut('⌘P', 'Set position to 0', 'gCode')
    defineShortcut('Esc', 'Emergency stop', 'gCode')
  }
  
  keyShortcut(e) {
    if(e.keyCode == 27) {
      self.emit('serialDirectWrite', { data: 'M410\nM112\n' })
      self.emit('serialClean')
      self.emit('disconnect')
      setTimeout(() => self.emit('submitSerialForm'), 100)
      e.preventDefault()
      return
    }
    
    if(!(e.metaKey || e.ctrlKey)) return
    
    switch(e.keyCode) {
      case 69: self.emit('serialWrite', { data: [`G28 ${e.altKey ? '' : 'XY'}`], prepend: true }); e.preventDefault(); break
      case 80: self.emit('serialWrite', { data: [`G92 X0 Y0 Z0`], prepend: true }); e.preventDefault(); break
    }
  }
  
  moveShortcut(e) {
    if(!(e.metaKey || e.ctrlKey)) return
    
    if(e.repeat && !this.deviceReady) return
    
    var vel = e.altKey ? 1 : 10
    
    switch(e.keyCode) {
      case 37: this.move('X', vel * -1); e.preventDefault(); break
      case 39: this.move('X', vel); e.preventDefault(); break
      
      case 38: this.move('Y', vel); e.preventDefault(); break
      case 40: this.move('Y', vel * -1); e.preventDefault(); break
      
      case 187: this.move('Z', vel * .1); e.preventDefault(); break
      case 189: this.move('Z', vel * -.1); e.preventDefault(); break
    }
  }
  
  move(axis, vel) {
    self.emit('serialWrite', { data: ['G91', `G1 ${axis} ${vel} F100000`, 'G90', 'M400'], prepend: true })
  }
}
