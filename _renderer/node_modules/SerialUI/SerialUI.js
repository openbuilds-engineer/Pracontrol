var style = `
:host {
  order: 100;
  padding-right: 0.25rem;
  font-size: 0.85em;
  min-width: 10rem;
  text-align: right;
}
::content {
  > status {
    &.enabled { color: ForestGreen; }
  }
}
`

module.exports = class SerialUI extends WebComponentAbstract {
  init() {
    this.new(require('./Count'), { serial: this.serial }, false)
    this.new(require('./Connect'), {}, false)
    
    this.renderLess(style)
    
    this.textStatus = this.new('span')
    self.on('connect', e => this.textStatus.textContent = 'Connecting')
    self.on('connected', e => this.textStatus.textContent = 'Connected')
    self.on('deviceOk', e => this.textStatus.textContent = 'Ready')
    self.on('deviceBusy', e => this.textStatus.textContent = 'Busy')
    self.on('disconnect', e => this.textStatus.textContent = 'Disconnecting')
    self.on('disconnected', e => this.textStatus.textContent = 'Disconnected')
    this.newText(' ')
    
    this.count = this.new('span')
    var s = 0
    var count = () => this.count.textContent = s == -1 ? '' : `${s++}s`
    var interval = null
    self.on('connected', e => { s = 1; interval = setInterval(count, 1000); count(); })
    self.on('deviceOk', e => { s = -1; clearInterval(interval); count(); })
    self.on('disconnected', e => { s = -1; clearInterval(interval); count(); })
    this.newText(' ')
    
    var conStatus = this.new('status', { textContent: '●' })
    self.on('connected', e => conStatus.classList.add('enabled'))
    self.on('disconnected', e => conStatus.classList.remove('enabled'))
    
    var busyStatus = this.new('status', { textContent: '●' })
    self.on('deviceOk', e => busyStatus.classList.add('enabled'))
    self.on('deviceBusy', e => busyStatus.classList.remove('enabled'))
    self.on('disconnected', e => busyStatus.classList.remove('enabled'))
    
    setImmediate(() => self.emit('newPanel', { el: this, position: 'bottom' }))
  }
}
