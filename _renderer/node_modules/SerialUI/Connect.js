var style = `
:host {
  
}
::content {
  input:not([type='checkbox']), select { width: 100%; margin-bottom: 1rem !important; }
}
`

module.exports = class SerialConnect extends WebComponentAbstract {
  init() {
    this.renderLess(style)
    
    this.port = this.new('select')
    this.port.on('click', e => self.emit('refreshPorts'))
    
    this.ser.speed = this.ser.speed || 115200
    this.speed = Synth(this.ser, 'speed', this.new('input', { type: 'number' }))
    
    this.submit = this.new('input', { type: 'button' })
    this.submit.on('click', e => this.submitClick(e))
    
    var l = this.new('label')
    this.reconnect = l.new('input', { type: 'checkbox', checked: this.ser.reconnect })
    l.newText('Reconnect at startup')
    this.reconnect.on('change', e => this.ser.reconnect = this.reconnect.checked)
    this.firstTime = true
    self.on('refreshPortsDone', e => this.firstTime = false)
    
    self.on('refreshPorts', e => this.port.children.forEach(el => el.remove()))
    self.on('newPort', e => this.newPort(e))
    self.on('connect', e => this.connect(e))
    self.on('connected', e => this.connectedFunc(e))
    self.on('disconnected', e => this.disconnected(e))
    
    setImmediate(() => self.emit('newControl', { el: this }))
  }
  
  newPort(e) {
    var o = this.port.new('option')
    o.port = e.detail.port
    o.textContent = e.detail.port.comName.replace('/dev/cu.', '').replace(/-/g, ' ')
    
    if(this.firstTime && this.ser.reconnect && o.textContent == this.ser.last) {
      o.selected = true
      this.submitClick()
    }
  }
  
  connect(e) {
    this.submit.disabled = true
    this.speed.disabled = this.port.disabled = true
    this.submit.value = 'Connecting'
  }
  
  connectedFunc(e) {
    this.ser.last = this.port.selectedOptions[0].textContent
    this.connected = true
    this.submit.disabled = false
    this.submit.value = 'Disconnect'
  }
  
  disconnected(e) {
    this.connected = false
    this.submit.disabled = false
    this.speed.disabled = this.port.disabled = false
    this.submit.value = 'Connect'
  }
  
  submitClick(e) {
    self.emit(this.connected ? 'disconnect' : 'connect')
  }
}
