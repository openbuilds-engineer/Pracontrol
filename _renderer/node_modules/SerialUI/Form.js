var style = `
:host {
  
}
::content {
  input:not([type='checkbox']), select { width: 100%; margin-bottom: 1rem !important; }
}
`

module.exports = class SerialForm extends WebComponentAbstract {
  init() {
    this.renderLess(style)
    
    var port = this.port = this.new('select')
    port.on('click', e => self.emit('refreshPorts'))
    self.on('newPort', e => this.newPort(e.detail))
    
    this.ser.speed = this.ser.speed || 115200
    var speed = Synth(this.ser, 'speed', this.new('input', { type: 'number' }))
    
    var submit = this.new('input', { type: 'button' })
    submit.on('click', e => this.click())
    
    var l = this.new('label')
    var reconnect = l.new('input', { type: 'checkbox', checked: this.ser.reconnect })
    l.newText('Reconnect at startup')
    reconnect.on('change', e => this.ser.reconnect = reconnect.checked)
    
    this.firstTime = true
    self.on('refreshPortsDone', e => this.firstTime = false)
    
    Observe(this, 'state', v => {
      if(v == 0) {
        submit.disabled = speed.disabled = port.disabled = false
        submit.value = 'Connect'
      }
      else if(v == 1) {
        submit.disabled = speed.disabled = port.disabled = true
        submit.value = 'Connecting'
      }
      else if(v == 2) {
        submit.disabled = false
        submit.value = 'Disconnect'
      }
      else if(v == 3) {
        submit.disabled = true
        submit.value = 'Disconnecting'
      }
    })
    
    self.on('connect', e => this.state++)
    self.on('connected', e => this.state++)
    self.on('disconnect', e => this.state++)
    self.on('disconnected', e => this.state = 0)
    
    defineEvent('submitSerialForm', 'Submit serial connect form', 'Serial')
    self.on('submitSerialForm', e => this.click())
    
    self.emit('newControl', { el: this })
  }
  
  click() {
    if(this.state == 2) { return self.emit('disconnect') }
    
    if(!this.port.selectedOptions[0] || !this.ser.speed) { return }
    
    var portName = this.port.selectedOptions[0].port.comName
    self.emit('connect', { portName, baudrate: this.ser.speed })
    this.ser.last = portName
  }
  
  newPort(port) {
    var textContent = port.comName.replace('/dev/cu.', '').replace(/-/g, ' ')
    var o = this.port.new('option', { port, textContent })
    
    if(this.firstTime && this.ser.reconnect && port.comName == this.ser.last) {
      o.selected = true
      this.click()
    }
  }
}
