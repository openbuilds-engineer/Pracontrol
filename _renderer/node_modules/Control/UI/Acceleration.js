var style = `
::content label { white-space: nowrap; }
::content input[type='number'] { width: 5rem; }
::content input.jerk { width: 4rem; }
::content span.acc { min-width: 3rem; display: inline-block; }
`

module.exports = class Acceleration extends WebComponentAbstract {
  init() {
    this.renderCss(style)
    
    var p = this.new('p', { textContent: 'Max acceleration ' })
    p.new('small', { textContent: 'mm/sec^2' })
    p.new('br')
    var opt = { type: 'number', step: 1 }
    var l = p.new('label')
    l.new('span', { textContent: 'Travel ', className: 'acc' })
    this.accTravel = l.new('input', opt)
    this.accTravel.on('input', e => this.accSet())
    p.new('br')
    var l = p.new('label')
    l.new('span', { textContent: 'Print ', className: 'acc' })
    this.accPrint = l.new('input', opt)
    this.accPrint.on('input', e => this.accSet())
    p.new('br')
    var l = p.new('label')
    l.new('span', { textContent: 'Retract ', className: 'acc' })
    this.accRetract = l.new('input', opt)
    this.accRetract.on('input', e => this.accSet())
    
    
    var p = this.new('p', { textContent: 'Max jerk ' })
    p.new('small', { textContent: 'mm/s/s' })
    p.new('br')
    var opt = { type: 'number', step: 1, className: 'jerk' }
    this.jerkXY = p.new('label', { textContent: 'XY ' }).new('input', opt)
    this.jerkXY.on('input', e => this.advancedSet())
    p.newText(' ')
    this.jerkZ = p.new('label', { textContent: 'Z ' }).new('input', opt)
    this.jerkZ.on('input', e => this.advancedSet())
    p.newText(' ')
    this.jerkE = p.new('label', { textContent: 'E ' }).new('input', opt)
    this.jerkE.on('input', e => this.advancedSet())
    p.newText(' ')
    
    var p = this.new('p', { textContent: 'Min feed rate ' })
    p.new('small', { textContent: 'mm/s/s' })
    p.new('br')
    var opt = { type: 'number', step: 1 }
    this.minFeedTravel = p.new('label', { textContent: 'Travel '}).new('input', opt)
    this.minFeedTravel.on('input', e => this.advancedSet())
    p.newText(' ')
    this.minFeedPrint = p.new('label', { textContent: 'Print '}).new('input', opt)
    this.minFeedPrint.on('input', e => this.advancedSet())
    
    var p = this.new('p', { textContent: 'Min segment time ' })
    var opt = { type: 'number', step: 1 }
    this.segmentTime = p.new('input', opt)
    this.segmentTime.on('input', e => this.advancedSet())
    p.newText(' ')
    p.new('small', { textContent: 'µs' })
    
    
    self.on('serialConfig', e => this.echo(e.detail))
  }
  
  accSet() {
    var val = `P${this.accPrint.value} R${this.accRetract.value} T${this.accTravel.value}`
    self.emit('serialWrite', { data: `M204 ${val}`, prepend: true })
  }
  
  accValue(msg) {
    var m = msg.match(/([0-9]+\.?[0-9]*)/g)
    this.accPrint.value = parseFloat(m[1])
    this.accRetract.value = parseFloat(m[2])
    this.accTravel.value = parseFloat(m[3])
  }
  
  advancedSet() {
    var val = `M205 S${this.minFeedPrint.value} T${this.minFeedTravel.value} B${this.segmentTime.value} X${this.jerkXY.value} Z${this.jerkZ.value} E${this.jerkE.value}`
    self.emit('serialWrite', { data: `M205 ${val}`, prepend: true })
  }
  
  advancedValue(msg) {
    var m = msg.match(/([0-9]+\.?[0-9]*)/g)
    this.minFeedPrint.value = parseFloat(m[1])
    this.minFeedTravel.value = parseFloat(m[2])
    this.segmentTime.value = parseFloat(m[3])
    this.jerkXY.value = parseFloat(m[4])
    this.jerkZ.value = parseFloat(m[5])
    this.jerkE.value = parseFloat(m[6])
  }
  
  echo(msg) {
    if(msg.startsWith('M204')) this.accValue(msg)
    else if(msg.startsWith('M205')) this.advancedValue(msg)
  }
}
