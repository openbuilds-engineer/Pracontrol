var style = `
::content label { white-space: nowrap; }
::content input[type='number'] { width: 5rem; }
`

module.exports = class AxisSettings extends WebComponentAbstract {
  init() {
    this.renderCss(style)
    
    self.on('serialEcho', e => this.echo(e.d))
  }
  
  readyCallback() {
    
    var p = this.newElem('p', true, { textContent: this.opt.name })
    p.newElem('br')
    
    var opt = { type: 'number', step: 1 }
    this.X = p.newElem('label', true, { textContent: 'X '}).newElem('input', true, opt)
    this.X.on('input', e => this.set())
    p.newText(' ')
    
    this.Y = p.newElem('label', true, { textContent: 'Y '}).newElem('input', true, opt)
    this.Y.on('input', e => this.set())
    p.newElem('br')
    
    this.Z = p.newElem('label', true, { textContent: 'Z '}).newElem('input', true, opt)
    this.Z.on('input', e => this.set())
    p.newText(' ')
    
    this.E = p.newElem('label', true, { textContent: 'E '}).newElem('input', true, opt)
    this.E.on('input', e => this.set())
    p.newElem('br')
  }
  
  set() {
    var val = `X${this.X.value} Y${this.Y.value} Z${this.Z.value} E0 S${this.E.value}`
    AppEvent('serialWrite', { data: `${this.opt.gCode} ${val}` })
  }
  
  value(msg) {
    var m = msg.match(/([0-9]+\.?[0-9]*)/g)
    this.X.value = parseFloat(m[1])
    this.Y.value = parseFloat(m[2])
    this.Z.value = parseFloat(m[3])
    this.E.value = parseFloat(m[5])
  }
  
  echo(msg) {
    if(msg.startsWith(this.opt.gCode)) return this.value(msg)
  }
}
