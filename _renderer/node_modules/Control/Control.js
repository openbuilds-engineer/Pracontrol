var style = `
:host {
  top: -1rem; bottom: -1rem; left: -1rem; right: -1rem;
  position: absolute;
}

::content {
  
  left {
    flex: 0 0 auto;
    margin-bottom: 0;
    
    height: 100%;
    overflow-x: hidden;
    overflow-y: auto;
    
    background-color: #333;
    
    tab {
      display: block;
      color: #fff;
      font-size: 0.85em;
      padding: 0.2rem 0.4rem; padding-right: 0.5rem;
      
      &.active, &:hover, &:focus { background-color: #666; }
    }
  }
  right {
    height: calc(~'100% - 2rem');
    overflow-x: hidden;
    overflow-y: auto;
    padding: 1rem;
    padding-left: 0;
  }
}
`

module.exports = class Control extends TabComponent {
  init() {
    this.renderLess(style)
    
    defineEvent('newControl', 'Add item to Control', 'Control', "{ tab: '', cat: '', gcode: '', name: '' or elem: <HTMLElement>, tab: '' }")
    self.on('newControl', e => this.newControl(e.detail))
    
    var div = this.new('div', true, { className: 'column-system' })
    this.left = div.new('left')
    this.right = div.new('right')
    
    this.initTab(this.left)
    
    this.skipCat = []
  }
  
  readyCallback() {
    self.emit('newTab', { elem: this, name: 'Control', priority: -90 })
  }
  
  attachedCallback() {
    var gCode = require('./gCode')
    
    Object.keys(gCode).forEach(code => {
      var val = gCode[code]
      if(val.duplicate) return
      self.emit('newControl', val)
    })
  }
  
  newControl(c) {
    if(this.skipCat.includes(c.cat)) return
    c.tab = c.tab || 'Control'
    
    var tab = this.left.querySelector(`tab[name='${c.tab}']`)
    if(!tab) {
      tab = { name: c.tab, elem: this.new(FlexBalanced, false, { basis: 12 }) }
      this.right.appendChild(tab.elem)
      this.newTab(tab)
    }
    
    var module
    
    if(c.elem) {
      tab.elem.appendChild(c.elem)
    }
    else if(module = moduleAvailable(`./UI/${c.cat}`)) {
      this.skipCat.push(c.cat)
      tab.elem.new(require(module), true, { command: c, parent: this })
    }
    else {
      var p = tab.elem.new('p')
      var a = p.new('a')
      
      if(c.arg === null) {
        a.textContent = c.name
        a.classList.add('button')
      } else {
        a.new('b', true, { textContent: c.gcode })
        a.newText(' ' + c.name)
        a.new('br')
        a.new('small', true, { textContent: c.arg || 'Â ' })
      }
      
      a.on('click', e => self.emit('consoleInputValue', c.gcode + ' '))
    }
  }
}

var moduleAvailable = m => { try { return require.resolve(m) } catch(e) { return false } }
